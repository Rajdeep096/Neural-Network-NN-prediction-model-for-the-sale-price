# -*- coding: utf-8 -*-
"""Final_32_32_15000_error_15_23.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kdb7lio8TE_gth7JSYX698ABLM-PCptb
"""

import pandas

df = pandas.read_excel("/content/Assignment 2_BUSI 651_House Prices.xls")

y = df ["SalePrice"]

x = df[["GarageCars", "GarageArea", "OverallQual", "GrLivArea"]]

y_train = y[0:1167]
y_test = y[1167:]

x_train = x[0:1167]
x_test = x[1167:]

from keras.models import Sequential

from keras.layers import Dense, Activation

bmodel = Sequential()

bmodel.add ( Dense (32, activation = "relu", input_dim = 4)  )

bmodel.add ( Dense (32, activation = "relu" ) )

bmodel.add ( Dense (1) )

bmodel.compile (optimizer = "adam", loss = "mean_squared_error")

bmodel.fit(x_train, y_train, epochs = 15000)

bmodel.predict([[2, 600, 7, 2200]])

x_test

y_test

y_pred = bmodel.predict (x_test)

import numpy

y_test1 = y_test.to_numpy()
y_pred1 = y_pred.reshape(1, 293)

numpy.subtract(y_test1, y_pred1)

APE = abs (numpy.subtract(y_test1, y_pred1))/y_test1 * 100

APE.mean()

df["GarageCars"].mean()

df["GarageArea"].mean()

df["OverallQual"].mean()

df["GrLivArea"].mean()

bmodel.predict([[1.48, 600, 7, 2200]])

bmodel.predict([[2, 472.98, 7, 2200]])

bmodel.predict([[2, 600, 6.09, 2200]])

bmodel.predict([[2, 600, 7, 1515.46]])

"""Keeping GrLivArea Variable and other pararmeter as an fixed mean value predicting the price:"""

#bmodel.predict([[1.48, 472.9, 6.09, ....]])
grLivArea = df[[ "GrLivArea"]]
datagrLivArea = grLivArea[1167:]
datagrLivAreaArr= datagrLivArea.to_numpy()
testValueOfgrLivArea = datagrLivAreaArr.reshape(1,293).flatten().tolist()
PredictedValue = []
for element in testValueOfgrLivArea:
    predVal= bmodel.predict([[1.48, 472.9, 6.09, element]])
    PredictedValue.append(predVal)

PredictedValue_list = [item[0][0] for item in PredictedValue]

import matplotlib.pyplot as plt
x = testValueOfgrLivArea
y = PredictedValue_list
labels = testValueOfgrLivArea
plt.scatter(x, y)
#plt.xlim(850, 2300)
plt.xlabel("GrLivArea")
plt.ylabel("SalePrice")
plt.show()

"""Keeping OverallQual Variable and other pararmeter as an fixed mean value predicting the price:"""

overallQual = df[[ "OverallQual"]]
dataoverallQual = overallQual[1167:]
dataoverallQualArr= dataoverallQual.to_numpy()
testValueOfoverallQual = dataoverallQualArr.reshape(1,293).flatten().tolist()
qualPredictedValue = []
for element in testValueOfoverallQual:
    qualPredVal= bmodel.predict([[1.48, 472.9, element,1515.46]])
    qualPredictedValue.append(predVal)

qualPredictedValue_list = [item[0][0] for item in qualPredictedValue]

x = testValueOfoverallQual
y = qualPredictedValue_list
labels = testValueOfoverallQual
plt.scatter(x, y)
#plt.xlim(850, 2300)
plt.xlabel("Overall Quality")
plt.ylabel("Sales Price")
plt.show()

garageArea = df[[ "GarageArea"]]
datagarageArea = garageArea[1167:]
datagarageAreaArr= datagarageArea.to_numpy()
testValueOfgarageArea = datagarageAreaArr.reshape(1,293).flatten().tolist()
garageAreaPredictedValue = []
for element in testValueOfgarageArea:
    garageAreaPredVal= bmodel.predict([[1.48, element ,6.09,1515.46]])
    garageAreaPredictedValue.append(predVal)

garageAreaPredictedValue_list = [item[0][0] for item in garageAreaPredictedValue]

x = testValueOfgarageArea
y = garageAreaPredictedValue_list
labels = testValueOfoverallQual
plt.scatter(x, y)
#plt.xlim(850, 2300)
plt.xlabel("Garage Area")
plt.ylabel("Sales Price")
plt.show()

garageCars = df[[ "GarageCars"]]
datagarageCars = garageCars[1167:]
datagarageCarsArr= datagarageCars.to_numpy()
testValueOfgarageCars = datagarageCarsArr.reshape(1,293).flatten().tolist()
garageCarsPredictedValue = []
for element in testValueOfgarageCars:
    garagecarsPredVal= bmodel.predict([[1.48, element ,6.09,1515.46]])
    garageCarsPredictedValue.append(predVal)

garageCarsPredictedValue_list = [item[0][0] for item in garageCarsPredictedValue]

x = testValueOfgarageCars
y = garageCarsPredictedValue_list
labels = testValueOfgarageCars
plt.scatter(x, y)
#plt.xlim(850, 2300)
plt.xlabel("Garage Cars")
plt.ylabel("Sales Price")
plt.show()